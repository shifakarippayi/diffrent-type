{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMrlqw0is2nc0L2brGbGVGA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**LAMBDA FUNCTION**"],"metadata":{"id":"lqkyK5g4jD4r"}},{"cell_type":"markdown","source":["lambda Functions are similar to user defined functions but without a name\n","\n"," They're commonly referred to as anonymous functions.\n","\n","Syntax\n","\n","lambda argument(s):expression\n","\n","lambda le a keyword in Python for defining the anonymous function\n","\n"," argument(s)is a placeholder,that is a variable that will be used to hold the\n","\n"," value you want to pass into the function expression. A lambda function can\n","  \n"," have multiple variables depending on what you want to acheive.\n","   \n"," expression is the code you want to exacute in the lambda function"],"metadata":{"id":"uXYbvSJsjKc8"}},{"cell_type":"code","source":["#hello\n","OLLEH"],"metadata":{"id":"G2boJn_XkBli"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#user defined function\n","def functionnames(n1,n2):\n","\n","  expression"],"metadata":{"id":"iN3E3JUikH7y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def exp(x):\n","\n","  return x**2\n","\n","exp(6)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FkQLUXTpkZpg","executionInfo":{"status":"ok","timestamp":1727089781584,"user_tz":-330,"elapsed":497,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"c1b3a99f-0475-47b5-e86c-715cc1342fa2"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["36"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["x=lambda x:x**2\n","\n","print(x(4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oc7kJiVtkrmA","executionInfo":{"status":"ok","timestamp":1727089840926,"user_tz":-330,"elapsed":580,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"3514b47a-17ca-45d1-a6ef-0aa058ee1465"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["16\n"]}]},{"cell_type":"code","source":["print((lambda x:x**2)(4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E8AzrU1Zk6o6","executionInfo":{"status":"ok","timestamp":1727089886086,"user_tz":-330,"elapsed":452,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"23b3a229-a41f-450b-8519-ab534de4ce6a"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["16\n"]}]},{"cell_type":"code","source":["x=lambda x : x.upper()[::-1]\n","\n","print(x(\"hello\"))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ITwrTKE8lH2N","executionInfo":{"status":"ok","timestamp":1727089949686,"user_tz":-330,"elapsed":461,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"20d81eb5-755d-4fa8-e87a-05f75226f6f3"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["OLLEH\n"]}]},{"cell_type":"code","source":["x=lambda x,y : x-y if x>y else y-x\n","\n","print(x(2,4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UTZOi33AlVnw","executionInfo":{"status":"ok","timestamp":1727090054602,"user_tz":-330,"elapsed":665,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"787784aa-137d-4847-fbb1-d4feb587247b"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n"]}]},{"cell_type":"code","source":["x=lambda x,y : x-y if x>y else y-x\n","\n","print(x(2,3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s0Au4ED6l08M","executionInfo":{"status":"ok","timestamp":1727090099694,"user_tz":-330,"elapsed":4,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"b99ceb0d-c45f-4f33-fe90-cab2bde3ea97"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n"]}]},{"cell_type":"code","source":["x=lambda x: \"even\" if x%2==0 else \"odd\"\n","\n","print(x(4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FNocVCC3l8Ok","executionInfo":{"status":"ok","timestamp":1727090179012,"user_tz":-330,"elapsed":515,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"8c4515b9-3d4a-4481-f2e3-55f4f6cc17dc"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["even\n"]}]},{"cell_type":"markdown","source":["**FILTER FUNCTION**"],"metadata":{"id":"lSpXU0wDmduw"}},{"cell_type":"markdown","source":["The filer function operator on a list and returns a subset of that list after\n","\n","applying the filter rule. The function filter(f,I) needs a function f as it\n","\n","arguments.f returns a Boolean value ie either true or false.this function\n","\n"," will be applied to every element of the list I. only if f returns True will\n","\n","  element of the list l.only if f returns True will the element of the list be\n","  \n"," included in the result list"],"metadata":{"id":"IAAsck-wmp0h"}},{"cell_type":"code","source":["list1= [2,4,5,6,7,8,12,13,15,11]"],"metadata":{"id":"J7l5xYTznTGY","executionInfo":{"status":"ok","timestamp":1727090874516,"user_tz":-330,"elapsed":516,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["x=filter(lambda x : x%2==0,list1)\n"],"metadata":{"id":"97BQX0eVob2M","executionInfo":{"status":"ok","timestamp":1727090885874,"user_tz":-330,"elapsed":716,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["print((x))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ykAzNWeNnhWg","executionInfo":{"status":"ok","timestamp":1727090548171,"user_tz":-330,"elapsed":522,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"63ae3565-83bc-4cda-bd31-f25070fbfea7"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["<function <lambda> at 0x7eaba1996830>\n"]}]},{"cell_type":"code","source":["print(list(x))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l5tYWOKHo5iX","executionInfo":{"status":"ok","timestamp":1727090906071,"user_tz":-330,"elapsed":6,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"b402a0d9-320e-48c5-a57e-a5f524e6b205"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 4, 6, 8, 12]\n"]}]},{"cell_type":"code","source":["print(list(filter(lambda x : x%2==0,list1)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ooxqRMgXo_IN","executionInfo":{"status":"ok","timestamp":1727090945232,"user_tz":-330,"elapsed":605,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"63810202-28df-4ae9-c600-3755d05a12b7"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 4, 6, 8, 12]\n"]}]},{"cell_type":"code","source":["list1=['raju','ramu','dolu','ram']\n","\n","print(list(filter(lambda x : x[0]=='r',list1)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wcr9_8Uvpe1K","executionInfo":{"status":"ok","timestamp":1727091179112,"user_tz":-330,"elapsed":473,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"210e85b7-c81e-44a7-83ac-db6ca431f6d7"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["['raju', 'ramu', 'ram']\n"]}]},{"cell_type":"markdown","source":["**MAP FUNCTION**"],"metadata":{"id":"9TdM0LW7qXkg"}},{"cell_type":"markdown","source":["\n","\n","The map()transforms a given list in to a new list by transforming each element\n","\n"," using a rule,it is used to apply a function to each element of a list or any\n","\n","other iterable\n","\n","This is very useful when we do vector mathematics, the map() function will take\n","\n"," multiple list operates on then and return the output list, one thing to note is\n","\n","  that all the list should be of the same size because map() applies the\n","  \n","   function to corresponding elements in those lists\n","\n","\n","   \n","\n","map()\n","\n","You use the map() function whenever you want to modify every value in iterable"],"metadata":{"id":"HhLs-qkaqeKY"}},{"cell_type":"code","source":["#list1=[2,3,4,1]\n","#syntax of map()\n","#print(list(map(f,list1)))"],"metadata":{"id":"QsQBNJ9fq-QQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["list1=[2,3,4,1]\n","\n","print(list(map(lambda x : x**2,list1)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IizmOm2ar3Af","executionInfo":{"status":"ok","timestamp":1727091751117,"user_tz":-330,"elapsed":468,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"12ea9e4a-7430-4300-8a35-00402e276284"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 9, 16, 1]\n"]}]},{"cell_type":"code","source":["list1=['raju','ramu','dolu','bolu''rema']\n","\n","#list2[true,true,false,true]\n","\n","list2=list(map(lambda name: name.startswith('r'), list1))\n","\n","print(list2)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DhbKaFOHsMTr","executionInfo":{"status":"ok","timestamp":1727092015948,"user_tz":-330,"elapsed":470,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"018e31ab-3d46-4262-841c-cd5c27b04273"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["[True, True, False, False]\n"]}]},{"cell_type":"markdown","source":["**ZIP FUNCTION**"],"metadata":{"id":"6dDqxU-1tloy"}},{"cell_type":"markdown","source":["\n","\n","The zip() function take iterables(can be zero or more) makes iterator that\n","\n","aggregates elements based on the iterables passed, and returns an iterator\n","\n","  or tuples\n","\n","syntax:\n","\n","zip(*iterables)"],"metadata":{"id":"79te7lhjt6Bc"}},{"cell_type":"code","source":["rn=[1,2,3]\n","\n","name=['raju','bolu','dolu']\n","\n","data=(list(zip(rn,name)))\n","\n","print(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"son7ZQk1uMAj","executionInfo":{"status":"ok","timestamp":1727092385639,"user_tz":-330,"elapsed":656,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"70e404a7-cac2-4a9d-8146-69f23d62cf70"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 'raju'), (2, 'bolu'), (3, 'dolu')]\n"]}]},{"cell_type":"code","source":["rn=[1,2,3]\n","\n","name=['raju','bolu','dolu']\n","\n","data=(dict(zip(rn,name)))\n","\n","print(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qAq3GxusuMGA","executionInfo":{"status":"ok","timestamp":1727092414105,"user_tz":-330,"elapsed":696,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"19c35edc-0345-456e-a49e-69e4ced7122b"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["{1: 'raju', 2: 'bolu', 3: 'dolu'}\n"]}]},{"cell_type":"code","source":["rn=[1,2,3]\n","\n","name=['raju','bolu','dolu']\n","\n","data=(tuple(zip(rn,name)))\n","\n","print(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jF2Z_hOsuuGL","executionInfo":{"status":"ok","timestamp":1727092431278,"user_tz":-330,"elapsed":895,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"c4dfee69-ac38-493b-feb2-d0da50df87ee"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["((1, 'raju'), (2, 'bolu'), (3, 'dolu'))\n"]}]},{"cell_type":"markdown","source":["**EXPECTION HANDING**"],"metadata":{"id":"eJZpl6SnuzAw"}},{"cell_type":"code","source":["num1=int(input(\"enter a number\"))\n","num2=int(input(\"enter a number\"))\n","\n","print(num1/num2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5kysCQ8KvoM8","executionInfo":{"status":"ok","timestamp":1727092735227,"user_tz":-330,"elapsed":12801,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"376bf1a1-2594-4c29-ee74-dedea46e7db4"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["enter a number4\n","enter a number2\n","2.0\n"]}]},{"cell_type":"code","source":["num1=int(input(\"enter a number\"))\n","num2=int(input(\"enter a number\"))\n","\n","print(num1/num2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"MC56qPzKwB6c","executionInfo":{"status":"error","timestamp":1727092773936,"user_tz":-330,"elapsed":8343,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"46bd7685-e7ad-46cd-d70b-e472320b220b"},"execution_count":41,"outputs":[{"name":"stdout","output_type":"stream","text":["enter a number10\n","enter a number0\n"]},{"output_type":"error","ename":"ZeroDivisionError","evalue":"division by zero","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-5c0e899116d0>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mnum2\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"enter a number\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnum2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"]}]},{"cell_type":"code","source":["#this is a zerodivision error"],"metadata":{"id":"hnIXGuObwG4Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num1=int(input('num1'))\n","num2=int(input('num2'))\n","\n","try:\n","  num3=(num1/num2)\n","  print(num3)\n","\n","except:\n","  print('an error exist')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qmAOa0rLxkQC","executionInfo":{"status":"ok","timestamp":1727093269030,"user_tz":-330,"elapsed":6694,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"a948cd10-cba8-46e0-9783-4a52dc4cd49a"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["num110\n","num20\n","an error exist\n"]}]},{"cell_type":"code","source":["num1=int(input('num1'))\n","num2=int(input('num2'))\n","\n","try:\n","  pnum3=(num1/num2)\n","  print(num3)\n","\n","except 0ZeroDivisionError as z:\n","  print(z)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"beHwYPGqwOjQ","executionInfo":{"status":"ok","timestamp":1727093152817,"user_tz":-330,"elapsed":9216,"user":{"displayName":"Shifa Shaheer","userId":"14266505392070304083"}},"outputId":"88ae20be-cdfb-4e9b-eb9e-b750b3df3430"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["num110\n","num20\n","division by zero\n"]}]}]}